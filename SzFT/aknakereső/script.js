// Glob√°lis v√°ltoz√≥k: r√°cs m√©rete √©s akn√°k sz√°ma
const gridSize = 5;
const mineCount = 5;
let grid = [];

// L√©trehozza az √ºres r√°csot √©s be√°ll√≠tja az akn√°kat, majd kirajzolja a j√°t√©kot
function createGrid() {
    // √úres r√°csot hoz l√©tre minden cella alapbe√°ll√≠t√°saival
    grid = Array(gridSize).fill().map(() => Array(gridSize).fill({ isMine: false, revealed: false, adjacentMines: 0 }));
    placeMines();         // Akn√°k elhelyez√©se v√©letlenszer≈±en a r√°cson
    calculateAdjacency(); // Szomsz√©dos akn√°k sz√°m√°nak kisz√°m√≠t√°sa minden cell√°ra
    renderGrid();         // A r√°cs megjelen√≠t√©se a b√∂ng√©sz≈ëben
}

// V√©letlenszer≈± helyekre rakja le az akn√°kat
function placeMines() {
    let placedMines = 0;
    // Addig ism√©tli, am√≠g az √∂sszes akn√°t le nem helyezt√ºk
    while (placedMines < mineCount) {
        const row = Math.floor(Math.random() * gridSize);
        const col = Math.floor(Math.random() * gridSize);
        // Csak akkor helyez akn√°t, ha az adott helyen m√©g nincs akna
        if (!grid[row][col].isMine) {
            grid[row][col] = { ...grid[row][col], isMine: true };
            placedMines++;
        }
    }
}

// Sz√°molja a szomsz√©dos akn√°k sz√°m√°t minden cell√°n√°l
function calculateAdjacency() {
    for (let row = 0; row < gridSize; row++) {
        for (let col = 0; col < gridSize; col++) {
            if (!grid[row][col].isMine) {
                grid[row][col].adjacentMines = countAdjacentMines(row, col);
            }
        }
    }
}

// Meghat√°rozza, h√°ny szomsz√©dos cella tartalmaz akn√°t
function countAdjacentMines(row, col) {
    const directions = [
        [-1, -1], [-1, 0], [-1, 1],
        [0, -1],         [0, 1],
        [1, -1], [1, 0], [1, 1]
    ];
    return directions.reduce((count, [dx, dy]) => {
        const newRow = row + dx;
        const newCol = col + dy;
        // Ellen≈ërzi, hogy az √∫j koordin√°ta a r√°cson bel√ºl van-e √©s hogy tartalmaz-e akn√°t
        if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize && grid[newRow][newCol].isMine) {
            return count + 1;
        }
        return count;
    }, 0);
}

// Megjelen√≠ti a r√°csot a b√∂ng√©sz≈ëben
function renderGrid() {
    const gameContainer = document.getElementById("game-container");
    gameContainer.innerHTML = ''; // Ki√ºr√≠ti a t√°rol√≥t az √∫jrarajzol√°s el≈ëtt
    grid.forEach((row, rowIndex) => {
        row.forEach((cell, colIndex) => {
            const cellElement = document.createElement("div");
            cellElement.classList.add("cell");
            cellElement.onclick = () => revealCell(rowIndex, colIndex); // Cellakattint√°s esem√©nykezel≈ë
            if (cell.revealed) {
                cellElement.classList.add("revealed");
                cellElement.innerText = cell.isMine ? "üí£" : cell.adjacentMines || '';
            }
            gameContainer.appendChild(cellElement);
        });
    });
}

// Felfedi a megadott cell√°t; ha akn√°t tal√°lunk, v√©ge a j√°t√©knak
function revealCell(row, col) {
    if (grid[row][col].revealed) return; // Ha a cella m√°r felfedett, nem t√∂rt√©nik semmi
    grid[row][col].revealed = true; // Felfedi a cell√°t
    if (grid[row][col].isMine) {
        alert("Vesztett√©l! Akn√°ra l√©pt√©l!");
        revealAll(); // Megmutatja az √∂sszes cell√°t
    } else if (grid[row][col].adjacentMines === 0) {
        revealAdjacentCells(row, col); // Ha nincs szomsz√©dos akna, felfedi a k√∂rnyez≈ë cell√°kat is
    }
    renderGrid(); // √öjrarajzol√°s
}

// Felfedi a szomsz√©dos cell√°kat, ha az aktu√°lis cella k√∂r√ºl nincs akna
function revealAdjacentCells(row, col) {
    const directions = [
        [-1, -1], [-1, 0], [-1, 1],
        [0, -1],         [0, 1],
        [1, -1], [1, 0], [1, 1]
    ];
    directions.forEach(([dx, dy]) => {
        const newRow = row + dx;
        const newCol = col + dy;
        // Ellen≈ërzi, hogy a cella hat√°ron bel√ºl van-e, √©s m√©g nincs felfedve
        if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize && !grid[newRow][newCol].revealed) {
            revealCell(newRow, newCol); // Rekurz√≠v h√≠v√°s
        }
    });
}

// Megmutatja az √∂sszes cell√°t, amikor a j√°t√©k v√©get √©r
function revealAll() {
    grid.forEach(row => row.forEach(cell => cell.revealed = true));
    renderGrid();
}

// √öj j√°t√©kot kezd, amikor a gombra kattintunk
function resetGame() {
    createGrid();
}

// A j√°t√©k bet√∂lt√©sekor l√©trehozza az els≈ë r√°csot
window.onload = createGrid;
